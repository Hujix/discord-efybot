const { Command } = require('discord.js-commando')
const commando = require('discord.js-commando');
const Discord = require('discord.js');
var aq = require('animequote');
const Kitsu = require('kitsu.js');
const kitsu = new Kitsu();


module.exports = class AnimeCommand extends Command {
    constructor(client) {
        super(client, {
            name: 'anime',
            group: 'anime',
            memberName: 'anime',
            guildOnly: true,
            description: 'Anime dizilerini aramanızı sağlar.',
            examples: [`${client.commandPrefix}anime-dizi-ara <anime adı>`],
            throttling: {
                usages: 1,
                duration: 5
            },
          	guildOnly: true,
          args: [
                {
                    key: 'content',
                    prompt: 'Hangi anime dizisini aramak istersin?',
                    type: 'string'
                }
            ]
        });
    }
  
  
    async run(message, args) {
       // var search = message.content.split(/\s+/g).slice(1).join(" ");
        var search = args.content;

        if (!search) {

            kitsu.searchAnime(aq().quoteanime).then(result => {

                var anime = result[0]

                var embed = new Discord.RichEmbed()
                    .setColor('#FF9D6E')
                    .setAuthor(`${anime.titles.english} | ${anime.showType}`, anime.posterImage.original)
                    .setDescription(anime.synopsis.replace(/<[^>]*>/g, '').split('\n')[0])
                    .addField('❯\u2000\Bilgilendirme', `•\u2000\**Japonca Ismi:** ${anime.titles.romaji}\n\•\u2000\**Yaş Değeri:** ${anime.ageRating}\n\•\u2000\**NSFW:** ${anime.nsfw ? 'Yes' : 'No'}`, true)
                    .addField('❯\u2000\İstatistik', `•\u2000\**Ort Değer:** ${anime.averageRating}\n\•\u2000\**Derece Sırası:** ${anime.ratingRank}\n\•\u2000\**Popülerlik Seviyesi:** ${anime.popularityRank}`, true)
                    .addField('❯\u2000\Bilgi', `•\u2000\**Bölüm:** ${anime.episodeCount ? anime.episodeCount : 'N/A'}\n\•\u2000\**Başlangıç T.:** ${anime.startDate}\n\•\u2000\**Bitiş T.:** ${anime.endDate ? anime.endDate : "Still airing"}`, true)
                    .setImage(anime.posterImage.original);
                return message.channel.send(`Try watching **${anime.titles.english}**!`, { embed: embed });
            })

        } else {
            var search = args.content;

            kitsu.searchAnime(search).then(result => {
                if (result.length === 0) {
                    return message.channel.send(`Sonuç bulunamadı **${search}**!`);
                }

                var anime = result[0]

                var embed = new Discord.RichEmbed()
                    .setColor('#FF9D6E')
                    .setAuthor(`${anime.titles.english ? anime.titles.english : search} | ${anime.showType}`, anime.posterImage.original)
                    .setDescription(anime.synopsis.replace(/<[^>]*>/g, '').split('\n')[0])
                    .addField('❯\u2000\İnformasyon', `•\u2000\**Japonca Ismi:** ${anime.titles.romaji}\n\•\u2000\**Yaş Değeri:** ${anime.ageRating}\n\•\u2000\**NSFW:** ${anime.nsfw ? 'Yes' : 'No'}`, true)
                    .addField('❯\u2000\İstatistik', `•\u2000\**Ort Değer:** ${anime.averageRating}\n\•\u2000\**Derece Sırası:** ${anime.ratingRank}\n\•\u2000\**Popülerlik Seviyesi:** ${anime.popularityRank}`, true)
                    .addField('❯\u2000\Bilgi', `•\u2000\**Bölüm:** ${anime.episodeCount ? anime.episodeCount : 'N/A'}\n\•\u2000\**Başlangıç T.:** ${anime.startDate}\n\•\u2000\**Bitiş T.:** ${anime.endDate ? anime.endDate : "Still airing"}`, true)
                    .setImage(anime.posterImage.original);
                return message.channel.send({ embed });
            }).catch(err => {
                console.log(err)
                return message.channel.send(`Sonuç bulunamadı **${search}**!`);
            });
        }
    } // sa bi hata olursa yaz bazı şeyleri kendime göre ayarladım altyapı da
}